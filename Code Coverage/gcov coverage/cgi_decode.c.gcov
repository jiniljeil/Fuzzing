        -:    0:Source:cgi_decode.c
        -:    0:Graph:./cgi_decode.gcno
        -:    0:Data:./cgi_decode.gcda
        -:    0:Runs:9
        -:    0:Programs:1
        -:    1:#include <stdlib.h>
        -:    2:#include <string.h>
        -:    3:#include <stdio.h>
        -:    4:
        -:    5:int hex_values[256];
        -:    6:
        9:    7:void init_hex_values() {
     2313:    8:    for (int i = 0; i < sizeof(hex_values) / sizeof(int); i++) {
     2304:    9:        hex_values[i] = -1;
     2304:   10:    }
        9:   11:    hex_values['0'] = 0; hex_values['1'] = 1; hex_values['2'] = 2; hex_values['3'] = 3;
        9:   12:    hex_values['4'] = 4; hex_values['5'] = 5; hex_values['6'] = 6; hex_values['7'] = 7;
        9:   13:    hex_values['8'] = 8; hex_values['9'] = 9;
        -:   14:
        9:   15:    hex_values['a'] = 10; hex_values['b'] = 11; hex_values['c'] = 12; hex_values['d'] = 13;
        9:   16:    hex_values['e'] = 14; hex_values['f'] = 15;
        -:   17:
        9:   18:    hex_values['A'] = 10; hex_values['B'] = 11; hex_values['C'] = 12; hex_values['D'] = 13;
        9:   19:    hex_values['E'] = 14; hex_values['F'] = 15;
        9:   20:}
        -:   21:
    #####:   22:int cgi_decode(char *s, char *t) {
    #####:   23:    while (*s != '\0') {
    #####:   24:        if (*s == '+')
    #####:   25:            *t++ = ' ';
    #####:   26:        else if (*s == '%') {
    #####:   27:            int digit_high = *++s;
    #####:   28:            int digit_low = *++s;
    #####:   29:            if (hex_values[digit_high] >= 0 && hex_values[digit_low] >= 0) {
    #####:   30:                *t++ = hex_values[digit_high] * 16 + hex_values[digit_low];
    #####:   31:            }
        -:   32:            else
    #####:   33:                return -1;
    #####:   34:        }
        -:   35:        else
    #####:   36:            *t++ = *s;
    #####:   37:        s++;
        -:   38:    }
    #####:   39:    *t = '\0';
    #####:   40:    return 0;
    #####:   41:}
        -:   42:
        9:   43:int main(int argc, char *argv[]) {
        9:   44:    init_hex_values();
        -:   45:
        9:   46:    if (argc >= 2) {
    #####:   47:        char *s = argv[1];
    #####:   48:        char *t = malloc(strlen(s) + 1); /* output is at most as long as input */
    #####:   49:        int ret = cgi_decode(s, t);
    #####:   50:        printf("%s\n", t);
    #####:   51:        return ret;
        -:   52:    }
        -:   53:    else
        -:   54:    {
        9:   55:        printf("cgi_decode: usage: cgi_decode STRING\n");
        9:   56:        return 1;
        -:   57:    }
        9:   58:}
